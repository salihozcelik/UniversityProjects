#lang scheme
;author : Salih Can Özçelik

(define (helperfunc1 farmlist farm) (if(> (length farmlist) 0 )(if(equal? (car(car farmlist)) farm) (car(cdr(car farmlist))) (helperfunc1 (cdr farmlist) farm)) 0))
(define (TRANSPORTATION-COST farm)(helperfunc1 FARMS farm))
(define (AVAILABLE-CROPS farm)(helperfunc2 FARMS farm))
(define (helperfunc2 farmlist farm)(if(>(length farmlist) 0)(if(equal? (car(car farmlist))farm)(car(cdr(cdr(car farmlist)))) (helperfunc2(cdr farmlist)farm)) '() ))
(define (INTERESTED-CROPS name)(helperfunc2 CUSTOMERS name))
(define (CONTRACT-FARMS name)(helperfunc3 CUSTOMERS name))
(define (helperfunc3 farmlist farm) (if(> (length farmlist) 0)(if(equal? (car(car farmlist)) farm) (car(cdr(car farmlist))) (helperfunc3(cdr farmlist)farm)) '() ))
(define (CONTRACT-WITH-FARM farm) (map (lambda(a) (car a)) (filter (lambda(x) (member farm (car(cdr x)))) CUSTOMERS)))
(define (INTERESTED-IN-CROP crop) (map (lambda(a) (car a)) (filter (lambda(x) (member crop (car(cdr(cdr x ))))) CUSTOMERS)))
(define (MIN-SALE-PRICE crop)  (car (sort (map (lambda(a) (car(cdr(cdr a)))) (filter (lambda(x) (equal? crop (car x))) CROPS)) < )))
(define (helperfunc4 low high) (lambda(x)(and (>= (car(cdr(cdr x))) low) (<= (car(cdr(cdr x))) high))) )
(define (CROPS-BETWEEN min max) (remove-duplicates (map (lambda(x) (car x)) (filter (helperfunc4 min max) CROPS))))
(define (Exists List elem)(cond((eqv? 0 (length List)) #f)((equal? elem (car List)) #t)(else (Exists (cdr List) elem))))
(define (helperfunc8 first second ) (cond((< first second) first)(else second)))
(define (helperfunc7 liste currentliste) (cond((eqv? 0 (length liste)) currentliste)
  (else (append currentliste (cons (+ (TRANSPORTATION-COST (cadar liste)) (caddar liste)) (helperfunc7 (cdr liste) currentliste)))))) 
(define (helperfunc5 cropL priceL custname crop min) (cond((eqv? 0 (length cropL)) min)
 ((and (equal? (caar cropL) crop) (Exists (CONTRACT-FARMS custname) (cadar cropL)))
  (helperfunc8 (helperfunc8 min (car priceL)) (helperfunc5 (cdr cropL) (cdr priceL) custname crop min)))
   (else (helperfunc5 (cdr cropL) (cdr priceL) custname crop min))))                                            
(define (BUY-PRICE custname cropname)(cond((eqv? 10000000 (helperfunc5 CROPS (helperfunc7 CROPS '()) custname cropname 10000000)) '0)
  (else (helperfunc5 CROPS (helperfunc7 CROPS '()) custname cropname 10000000))))
(define (helperfunc6 custneym cropList sum) (cond((eqv? 0 (length cropList)) sum)
  (else (+ (+ sum (BUY-PRICE custneym (car cropList))) (helperfunc6 custneym (cdr cropList) sum)))))
(define (TOTAL-PRICE custname) (helperfunc6 custname (INTERESTED-CROPS custname) 0))

